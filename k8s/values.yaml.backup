# Helm Chart Values for Celery Application Stack
# values.yaml

global:
  # Global image pull policy
  imagePullPolicy: IfNotPresent
  
  # Environment variables (will be loaded from ConfigMap/Secret)
  env:
    # Database configuration
    POSTGRES_USER: celery_user
    POSTGRES_DB: celery_db
    # RabbitMQ configuration
    RABBITMQ_HOST: local-rabbitmq
    POSTGRES_HOST: database

# RabbitMQ Message Broker Configuration
rabbitmq:
  enabled: true
  image:
    repository: rabbitmq
    tag: 4.1.2-management
    pullPolicy: IfNotPresent
  
  nameOverride: local-rabbitmq
  
  service:
    type: ClusterIP
    ports:
      amqp:
        port: 5672
        targetPort: 5672
      management:
        port: 15672
        targetPort: 15672
  
  # ConfigMap mount for rabbitmq.conf
  configMount:
    enabled: true
    configMapName: rabbitmq-config
    mountPath: /etc/rabbitmq/rabbitmq.conf
    subPath: rabbitmq.conf
  
  persistence:
    enabled: true
    pvcName: rabbitmq-data-pvc
    mountPath: /var/lib/rabbitmq
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  
  # Health checks
  livenessProbe:
    enabled: true
    exec:
      command:
        - rabbitmq-diagnostics
        - check_port_connectivity
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
  
  readinessProbe:
    enabled: true
    exec:
      command:
        - rabbitmq-diagnostics
        - check_port_connectivity
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# PostgreSQL Database Configuration
postgres:
  enabled: true
  image:
    repository: postgres
    tag: 17.5-bookworm
    pullPolicy: IfNotPresent
  
  nameOverride: database
  
  service:
    type: ClusterIP
    port: 5432
    targetPort: 5432
  
  persistence:
    enabled: true
    pvcName: postgres-data-pvc
    mountPath: /var/lib/postgresql/data
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  # Health checks
  livenessProbe:
    enabled: true
    exec:
      command:
        - sh
        - -c
        - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
    initialDelaySeconds: 60
    periodSeconds: 30
    timeoutSeconds: 10
    failureThreshold: 5
  
  readinessProbe:
    enabled: true
    exec:
      command:
        - sh
        - -c
        - pg_isready -U $POSTGRES_USER -d $POSTGRES_DB
    initialDelaySeconds: 30
    periodSeconds: 10
    timeoutSeconds: 5
    failureThreshold: 3

# Celery Worker Configuration
celeryWorker:
  enabled: true
  image:
    repository: chineidu/celery-worker
    tag: v1
    pullPolicy: Always
  
  # Custom command override
  command: ["python", "worker.py"]
  
  replicas: 1
  
  # Environment variables specific to this service
  env:
    CELERY_WORKER_TYPE: light
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  
  # Volume mounts using PVCs
  volumes:
    data:
      enabled: true
      mountPath: /app/data
      pvcName: app-data-pvc
    models:
      enabled: true
      mountPath: /app/models
      pvcName: models-data-pvc

# Celery Prediction Worker Configuration
celeryPredictionWorker:
  enabled: true
  image:
    repository: chineidu/celery-worker
    tag: v1
    pullPolicy: Always
  
  # Custom command for prediction worker
  command:
    - celery
    - -A
    - src.celery_pkg.app
    - worker
    - --queues=prediction
    - --concurrency=4
    - --loglevel=info
  
  replicas: 3  # Creates 3 replicas with 4 workers each (12 total workers)
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 1000m
      memory: 1Gi
    requests:
      cpu: 250m
      memory: 512Mi
  
  # Volume mounts using PVCs
  volumes:
    data:
      enabled: true
      mountPath: /app/data
      pvcName: app-data-pvc
    models:
      enabled: true
      mountPath: /app/models
      pvcName: models-data-pvc

# Celery Beat Scheduler Configuration
celeryBeat:
  enabled: true
  image:
    repository: chineidu/celery-worker
    tag: v1
    pullPolicy: Always
  
  # Custom command for beat scheduler
  command:
    - celery
    - -A
    - src.celery_pkg.app
    - beat
    - --loglevel=info
  
  replicas: 1  # Beat should only have 1 replica
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi

# Flower Monitoring Configuration
flower:
  enabled: true
  image:
    repository: chineidu/celery-worker
    tag: v1
    pullPolicy: Always
  
  # Custom command for flower
  command:
    - celery
    - -A
    - src.celery_pkg.app
    - flower
    - --basic_auth=$(CELERY_FLOWER_USER):$(CELERY_FLOWER_PASSWORD)
  
  replicas: 1
  
  service:
    type: ClusterIP
    port: 5555
    targetPort: 5555
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 200m
      memory: 256Mi
    requests:
      cpu: 50m
      memory: 128Mi
  
  # Ingress configuration (optional)
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: flower.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

# API Service Configuration
api:
  enabled: true
  image:
    repository: chineidu/celery-worker
    tag: v1
    pullPolicy: Always
  
  # Custom command for API
  command:
    - python
    - -m
    - src.api.app
  
  replicas: 1
  
  service:
    type: ClusterIP
    port: 8000
    targetPort: 8000
  
  # Resource limits and requests
  resources:
    limits:
      cpu: 500m
      memory: 512Mi
    requests:
      cpu: 100m
      memory: 256Mi
  
  # Volume mounts using PVCs
  volumes:
    data:
      enabled: true
      mountPath: /app/data
      pvcName: app-data-pvc
    models:
      enabled: true
      mountPath: /app/models
      pvcName: models-data-pvc
  
  # Ingress configuration (optional)
  ingress:
    enabled: false
    className: ""
    annotations: {}
    hosts:
      - host: api.local
        paths:
          - path: /
            pathType: Prefix
    tls: []

# ConfigMap and Secret References
config:
  # Reference to external ConfigMap for non-sensitive environment variables
  configMapRef:
    name: celery-app-config
  
  # Reference to external Secret for sensitive environment variables
  secretRef:
    name: celery-app-secrets

# Persistent Volume Claims Configuration
pvc:
  # RabbitMQ data PVC
  rabbitmqData:
    enabled: true
    name: rabbitmq-data-pvc
    size: 1Gi
    storageClass: ""
    accessMode: ReadWriteOnce
  
  # PostgreSQL data PVC
  postgresData:
    enabled: true
    name: postgres-data-pvc
    size: 2Gi
    storageClass: ""
    accessMode: ReadWriteOnce
  
  # Application data PVC (for data directory)
  appData:
    enabled: true
    name: app-data-pvc
    size: 1Gi
    storageClass: ""
    accessMode: ReadWriteMany  # Multiple pods need access
  
  # Models data PVC (for models directory)
  modelsData:
    enabled: true
    name: models-data-pvc
    size: 500Mi
    storageClass: ""
    accessMode: ReadWriteMany  # Multiple pods need access

# Service Account Configuration
serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

# Pod Security Context
podSecurityContext:
  fsGroup: 2000

# Security Context
securityContext:
  capabilities:
    drop:
    - ALL
  readOnlyRootFilesystem: false
  runAsNonRoot: true
  runAsUser: 1000

# Node Selector
nodeSelector: {}

# Tolerations
tolerations: []

# Affinity
affinity: {}

# Autoscaling (optional - can be enabled per service)
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  targetMemoryUtilizationPercentage: 80
