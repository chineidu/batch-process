services:
  local-rabbitmq: # 1st service
    image: rabbitmq:4.1.2-management
    container_name: local-rabbitmq
    env_file: # Location of file(s) containing the env vars. Only accessed by the container.
      - .env
    ports:
      - 5672:5672
      - 15672:15672
    volumes: # Persist the data volume
      - rabbitmq-data:/var/lib/rabbitmq
      # Volume mapping for the config file
      # It contains the RabbitMQ configuration
      - ./rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  postgres: # 2nd service
    image: postgres:17.5-bookworm
    # Remove name to allow Docker to automatically generate a name
    # when you have more than one replica
    # container_name: local-rmq-worker
    container_name: database
    env_file:
      - .env
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data  # Bind mount for the data folder
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U $POSTGRES_USER -d celery_db"]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 30s
    restart: unless-stopped

  celery-worker: # 3rd service
    image: chineidu/celery-worker:v1
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: celery-worker
    command: python worker.py
    environment:
      - RABBITMQ_HOST=local-rabbitmq
      - POSTGRES_HOST=database
      - CELERY_WORKER_TYPE=light
    env_file:
      - .env
    volumes:
      - ./data:/app/data  # Bind mount for the data folder
      - ./models:/app/models
    develop:
    # Create a `watch` configuration to update the app
      watch:
        - action: sync
          path: ./
          target: /app
          # Folders and files to ignore
          ignore:
            - .venv
            - "**/**/*.ipynb"
        # Rebuild image if any of these files change
        - action: rebuild
          path: ./pyproject.toml
    depends_on:
      local-rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  celery-prediction-worker: # 3rd service (copy)
    image: chineidu/celery-worker:v1
    build:
      context: ./
      dockerfile: Dockerfile
    # Remove name to allow Docker to automatically generate a name
    # when you have more than one replica
    # container_name: celery-worker
    command: > 
      celery -A src.celery_pkg.app worker --queues=prediction 
      --concurrency=4 --loglevel=info
    deploy:
      replicas: 3  # 4 * 3 = 12 workers
    environment:
      - RABBITMQ_HOST=local-rabbitmq
      - POSTGRES_HOST=database
    env_file:
      - .env
    volumes:
      - ./data:/app/data  # Bind mount for the data folder
      - ./models:/app/models
    depends_on:
      local-rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

  celery-beat: # 4th service
      image: chineidu/celery-worker:v1
      build:
        context: ./
      container_name: celery-beat
      environment:
      - RABBITMQ_HOST=local-rabbitmq
      - POSTGRES_HOST=database
      env_file:
        - .env
      command: celery -A src.celery_pkg.app beat --loglevel=info
      depends_on:
        local-rabbitmq:
          condition: service_healthy
        postgres:
          condition: service_healthy
      restart: unless-stopped

  flower: # 5th service
      image: chineidu/celery-worker:v1
      build:
        context: ./
      container_name: celery-flower
      command: >
        celery -A src.celery_pkg.app flower 
        --basic_auth=$CELERY_FLOWER_USER:$CELERY_FLOWER_PASSWORD
      environment:
      - RABBITMQ_HOST=local-rabbitmq
      - POSTGRES_HOST=database
      env_file:
        - .env
      ports:
        - "5555:5555"
      depends_on:
        local-rabbitmq:
          condition: service_healthy
        postgres:
          condition: service_healthy
      restart: unless-stopped
  api: # 6th service
    image: chineidu/celery-worker:v1
    build:
      context: ./
      dockerfile: Dockerfile
    # Remove name to allow Docker to automatically generate a name
    # when you have more than one replica
    # container_name: api
    command: > 
      python -m src.api.app
    environment:
      - RABBITMQ_HOST=local-rabbitmq
      - POSTGRES_HOST=database
    env_file:
      - .env
    ports:
      - "8000:8000"
    volumes:
      - ./data:/app/data  # Bind mount for the data folder
      - ./models:/app/models
    depends_on:
      local-rabbitmq:
        condition: service_healthy
      postgres:
        condition: service_healthy
    restart: unless-stopped

# Named volumes ONLY!
# Persist data outside the lifecycle of the container.
volumes:
  rabbitmq-data:
  postgres_data:
